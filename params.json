{"name":"crontab4j","tagline":"A utility to be for using CRON expressions in Java","body":"[![License](https://img.shields.io/badge/license-BSD_3--Clause-blue.svg)](http://opensource.org/licenses/BSD-3-Clause)\r\n\r\n## Quick start\r\n\r\n### Goal\r\n\r\nThis library allows for the triggering of a Java job based on a CRON expression.\r\n\r\n### Supported CRON syntaxes\r\n\r\n#### At the moment\r\n\r\n* [Unix](http://www.unix.com/man-page/linux/5/crontab/)\r\n  * Classic integer ranges\r\n  * Day and month names (3 letters, case insensitive)\r\n  * Special expressions, with the exception of ``@reboot``\r\n\r\n#### Planned for later\r\n\r\n* [cron4j](http://www.sauronsoftware.it/projects/cron4j/)\r\n* [Quartz](http://quartz-scheduler.org/) (but CRONs are only a little part of it)\r\n* crontab4j (take the best of each world and make it the most flexible as can be)\r\n\r\n### How to use it\r\n\r\n```java\r\nimport org.keyboardplaying.cron.parser.UnixCronParser;\r\nimport org.keyboardplaying.cron.scheduler.CronScheduler;\r\n\r\npublic class CronStarter {\r\n\r\n    public static void main(String[] args) {\r\n        CronScheduler schd = new CronScheduler();\r\n        // Set parser: only Unix at the moment, but more to come\r\n        schd.setParser(new UnixCronParser());\r\n        schd.scheduleJob(new Runnable() {\r\n            public void run() {\r\n                System.out.println(\"Another minute ticked.\");\r\n            }\r\n        }, \"* * * * *\");\r\n        // schd is a daemon: it will not prevent the JVM from stopping\r\n    }\r\n}\r\n```\r\n\r\n### Daemon\r\n\r\nThe JVM will stop automatically if all remaining threads are daemons. The ``CronScheduler`` is a daemon\r\nby default. To prevent this behaviour, you should instantiate it this way:\r\n```java\r\nCronScheduler schd = new CronScheduler(false);\r\n```\r\n\r\nA fair warning: you will have to stop it for the JVM to close:\r\n```java\r\nschd.terminate();\r\n```\r\n\r\n### Using with Spring\r\n\r\n```xml\r\n<bean id=\"schd\" class=\"org.keyboardplaying.cron.scheduler.CronScheduler\">\r\n    <property name=\"parser\"><bean class=\"org.keyboardplaying.cron.parser.UnixCronParser\"/></property>\r\n    <property name=\"jobs\">\r\n        <list>\r\n            <ref bean=\"job1\"/>\r\n            <ref bean=\"job2\"/>\r\n            ...\r\n        </list>\r\n    </property>\r\n</bean>\r\n\r\n<bean id=\"job1\" class=\"org.keyboardplaying.cron.scheduler.CronJob\">\r\n    <property name=\"job\" ref=\"myRunnableBean\"/>\r\n    <property name=\"cron\" value=\"0 0 * * *\"/>\r\n</bean>\r\n\r\n...\r\n```\r\n\r\n## Interesting links\r\n\r\n* [Unix man crontab](http://www.unix.com/man-page/linux/5/crontab/)\r\n* [Quartz](http://quartz-scheduler.org/) (but CRONs are only a little part of it)\r\n* [cron4j](http://www.sauronsoftware.it/projects/cron4j/)\r\n* [cron-utils](https://github.com/jmrozanec/cron-utils)\r\n\r\n## History\r\n\r\nIt happened at work: we wanted to gain the flexibility of CRON expressions for job scheduling, but\r\nmy boss feared Quartz was overkill for a single job.\r\n\r\nSo I gathered my knowledge about the CRONs (which was few, so I had to look for some more) and\r\ncreated my own parser and scheduler. Not that hard, actually, but this was a kind of a draft.\r\n\r\nI had the wish to go from scratch and write something a bit more elaborate and clean. And when\r\nlooking for the name, I discovered [``cron4j``](http://www.sauronsoftware.it/projects/cron4j/) was already taken by a similar project. Still,\r\nfor the challenge...\r\n\r\nMy first try had been using [``joda-time``](http://www.joda.org/joda-time/) for comfort and ease of use. However, this time, I\r\nchose to avoid external libraries as much as possible in order to keep the footprint as light as\r\npossible, and therefore used ``java.util.Calendar`` instead.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}